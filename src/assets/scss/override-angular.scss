// Creates a container object for a light theme to be given to individual component theme mixins.
@function mat-light-theme($primary, $success, $info, $warning, $danger, $dark, $accent, $warn: mat-palette($mat-red)) {
  @return (
    primary: $primary,
    success: $success,
    info: $info,
    warning: $warning,
    danger: $danger,
    dark: $dark,
    accent: $accent,
    warn: $warn,
    is-dark: false,
    foreground: $mat-light-theme-foreground,
    background: $mat-light-theme-background
  );
}

/**
**   Dark-Theme
*/
// Creates a container object for a dark theme to be given to individual component theme mixins.
@function mat-dark-theme($primary, $success, $info, $warning, $danger, $dark, $accent, $warn: mat-palette($mat-red)) {
  @return (
    primary: $primary,
    success: $success,
    info: $info,
    warning: $warning,
    danger: $danger,
    dark: $dark,
    accent: $accent,
    warn: $warn,
    is-dark: true,
    foreground: $mat-dark-theme-foreground,
    background: $mat-dark-theme-background
  );
}

/**
**   Override-mixin
*/
// Applies a focus style to an md-button element for each of the supported palettes.
@mixin _mat-button-ripple-color($theme, $hue, $opacity: 0.2) {
  $primary: map-get($theme, primary);
  $success: map-get($theme, success);
  $info: map-get($theme, info);
  $warning: map-get($theme, warning);
  $danger: map-get($theme, danger);
  $dark: map-get($theme, dark);
  $accent: map-get($theme, accent);
  $warn: map-get($theme, warn);

  &.mat-primary .mat-ripple-element {
    background-color: mat-color($primary, $hue, $opacity);
  }
  &.mat-success .mat-ripple-element {
    background-color: mat-color($success, $hue, $opacity);
  }
  &.mat-info .mat-ripple-element {
    background-color: mat-color($info, $hue, $opacity);
  }
  &.mat-warning .mat-ripple-element {
    background-color: mat-color($warning, $hue, $opacity);
  }
  &.mat-danger .mat-ripple-element {
    background-color: mat-color($danger, $hue, $opacity);
  }
  &.mat-dark .mat-ripple-element {
    background-color: mat-color($dark, $hue, $opacity);
  }
  &.mat-accent .mat-ripple-element {
    background-color: mat-color($accent, $hue, $opacity);
  }
  &.mat-warn .mat-ripple-element {
    background-color: mat-color($warn, $hue, $opacity);
  }
}

@mixin _mat-button-theme-property($theme, $property, $hue) {
  $primary: map-get($theme, primary);
  $success: map-get($theme, success);
  $info: map-get($theme, info);
  $warning: map-get($theme, warning);
  $danger: map-get($theme, danger);
  $dark: map-get($theme, dark);
  $accent: map-get($theme, accent);
  $warn: map-get($theme, warn);
  $background: map-get($theme, background);
  $foreground: map-get($theme, foreground);

  &.mat-primary {
    #{$property}: mat-color($primary, $hue);
  }
  &.mat-success {
    #{$property}: mat-color($success, $hue);
  }
  &.mat-info {
    #{$property}: mat-color($info, $hue);
  }
  &.mat-warning {
    #{$property}: mat-color($warning, $hue);
  }
  &.mat-danger {
    #{$property}: mat-color($danger, $hue);
  }
  &.mat-dark {
    #{$property}: mat-color($dark, $hue);
  }
  &.mat-accent {
    #{$property}: mat-color($accent, $hue);
  }
  &.mat-warn {
    #{$property}: mat-color($warn, $hue);
  }

  &.mat-primary,
  &.mat-success,
  &.mat-info,
  &.mat-warning,
  &.mat-danger,
  &.mat-dark,
  &.mat-accent,
  &.mat-warn,
  &[disabled] {
    &[disabled] {
      $palette: if($property == "color", $foreground, $background);
      #{$property}: mat-color($palette, disabled-button);
    }
  }
}

// Applies a property to an md-button element for each of the supported palettes.
@mixin mat-button-theme($theme) {
  $primary: map-get($theme, primary);
  $success: map-get($theme, success);
  $info: map-get($theme, info);
  $warning: map-get($theme, warning);
  $danger: map-get($theme, danger);
  $dark: map-get($theme, dark);
  $accent: map-get($theme, accent);
  $warn: map-get($theme, warn);
  $background: map-get($theme, background);
  $foreground: map-get($theme, foreground);

  .mat-button,
  .mat-icon-button,
  .mat-stroked-button {
    // Buttons without a background color should inherit the font color. This is necessary to
    // ensure that the button is readable on custom background colors. It's wrong to always assume
    // that those buttons are always placed inside of containers with the default background
    // color of the theme (e.g. themed toolbars).
    color: inherit;
    background: transparent;

    @include _mat-button-theme-property($theme, "color", text);
    @include _mat-button-focus-overlay-color($theme);

    // Setup the ripple color to be based on the text color. This ensures that the ripples
    // are matching with the current theme palette and are in contrast to the background color
    // (e.g in themed toolbars).
    .mat-ripple-element {
      opacity: $_mat-button-ripple-opacity;
      background-color: currentColor;
    }
  }

  .mat-button-focus-overlay {
    background: map_get($foreground, base);
  }

  // Note: this needs a bit extra specificity, because we're not guaranteed the inclusion
  // order of the theme styles and the button reset may end up resetting this as well.
  .mat-stroked-button:not([disabled]) {
    border-color: mat-color($foreground, divider);
  }

  .mat-flat-button,
  .mat-raised-button,
  .mat-fab,
  .mat-mini-fab {
    // Default font and background color when not using any color palette.
    color: mat-color($foreground, text);
    background-color: mat-color($background, raised-button);

    @include _mat-button-theme-property($theme, "color", default-contrast);
    @include _mat-button-theme-property($theme, "background-color", default);
    @include _mat-button-ripple-color($theme, default-contrast);
  }

  .mat-stroked-button,
  .mat-flat-button {
    @include _mat-theme-overridable-elevation(0, $theme);
  }

  .mat-raised-button {
    @include _mat-theme-overridable-elevation(2, $theme);

    &:not([disabled]):active {
      @include _mat-theme-overridable-elevation(8, $theme);
    }

    &[disabled] {
      @include _mat-theme-overridable-elevation(0, $theme);
    }
  }

  .mat-fab,
  .mat-mini-fab {
    @include _mat-theme-overridable-elevation(6, $theme);

    &:not([disabled]):active {
      @include _mat-theme-overridable-elevation(12, $theme);
    }

    &[disabled] {
      @include _mat-theme-overridable-elevation(0, $theme);
    }
  }
}
